<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://qqrs.github.com/atom.xml" rel="self"/>
  <link href="http://qqrs.github.com/"/>
  <updated>2016-05-22T12:35:02-04:00</updated>
  <id>http://qqrs.github.com/</id>
  <author>
    <name><![CDATA[Russell Smith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing a BitTorrent Client]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/22/writing-a-bittorrent-client/"/>
    <updated>2016-05-22T12:12:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/22/writing-a-bittorrent-client</id>
    <content type="html"><![CDATA[<p>I wrote <a href="https://github.com/qqrs/qqtorrent">a BitTorrent client</a> as an excuse to practice concurrent networking concepts.
However, when I started, I found that I had to do much more reading than I expected to understand the BitTorrent protocol and to decide whether the scope was appropriate for a spare time project.</p>

<p>As a result, this post is a short overview of a minimal BitTorrent download implementation.</p>

<p>I hope it will be useful to other programmers seeking an answer to the question: “Do I actually want to write a BitTorrent client?”</p>

<h2 id="parse-the-torrent-metainfo-file">1. Parse the <code>.torrent</code> metainfo file</h2>
<p>The <code>.torrent</code> file contains information about the torrent tracker and the files to be downloaded.
Data is encoded using a serialization protocol called bencoding.
Parsing bencoded data is not significantly more difficult than parsing json, and there is likely a bencoding library available for your language.</p>

<h2 id="connect-to-the-tracker">2. Connect to the tracker</h2>
<p>To connect to the torrent, an HTTP GET request is made to the tracker announce URL.
The response provides a list of available peers.</p>

<h2 id="concurrent-peer-network-connections">3. Concurrent peer network connections</h2>
<p>The client will connect to peers using TCP sockets.
To support multiple simultaneous connections the client should be able to handle network operations asynchronously.
There are two fundamental ways to do this in Python: (1) using threads, or
(2) using an event loop with select() (or a library like Twisted which does so internally).</p>

<h2 id="peer-protocol">4. Peer protocol</h2>
<p>The spec defines a number of messages that each peer must be prepared to send and receive.
A minimal download client may not need to implement all of these messages.
In order to start downloading from a peer, a client needs to send a handshake, wait for a handshake response,
send an ‘interested’ message, and wait for an ‘unchoke’ message.
It can then start sending ‘request’ messages to request blocks.
The peer will respond with ‘piece’ messages which contain the block data.</p>

<h2 id="torrent-strategy">5. Torrent strategy</h2>
<p>The client must download all blocks of all pieces and assemble them into the complete output file
set. If any peers disconnect or fail to provide a block, the client must request from another peer.
A more ambitious client may also attempt to further optimize its download strategy to improve download times.</p>

<h2 id="further-reading">Further reading</h2>

<p>I found the following blog posts to be very helpful when I was getting started:</p>

<p><a href="http://www.kristenwidman.com/blog/33/how-to-write-a-bittorrent-client-part-1/">How to Write a Bittorrent Client (part 1)</a> 
<a href="http://www.kristenwidman.com/blog/71/how-to-write-a-bittorrent-client-part-2/">(part 2)</a>
(Kristen Widman)<br />
<a href="http://charmeleon.github.io/advice/2012/11/26/pitfalls-when-creating-a-bittorrent-client/">Pitfalls when creating a BitTorrent client</a> (Erick Rivas)</p>

<p>The best advice I picked up from them is (1) to rely on the <a href="https://wiki.theory.org/BitTorrentSpecification">unofficial BitTorrent spec</a>, and (2) to use Wireshark to inspect network traffic to clarify ambiguities in the spec and to validate your implementation.</p>

<p>Since there are now many extensions to the BitTorrent protocol, you should test with torrents that do not use new or experimental features. I have had good luck with torrents from <a href="https://archive.org/details/bittorrent">archive.org</a> and <a href="http://bt.etree.org/">bt.etree.org</a>.</p>

<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which Python operations are atomic?]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/which-python-operations-are-atomic/"/>
    <updated>2016-05-01T18:52:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/which-python-operations-are-atomic</id>
    <content type="html"><![CDATA[<p>A conversation with a coworker turned me on to the fact that a surprising range of operations in Python are atomic, even operations like dictionary and class member assignment.</p>

<p>This wasn’t something I would have anticipated, given the number of machine language instructions that must ultimately be performed to complete an operation like hash table insertion.</p>

<p>Why?</p>

<p>The <a href="https://docs.python.org/2/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe">Python FAQ</a> provides explanation and a full list of atomic operations, but the short answer is:</p>

<ol>
  <li>The Python bytecode interpreter only switches between threads between bytecode instructions</li>
  <li>The Global Interpreter Lock (GIL) only allows a single thread to execute at a time</li>
  <li>Many operations translate to a single bytecode instruction</li>
</ol>

<p>It’s easy to check whether an operation compiles to a single bytecode instruction with <code>dis</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt;&gt;&gt; def update_dict():
</span><span class="line">...     d['a'] = 1
</span><span class="line">...
</span><span class="line">&gt;&gt;&gt; import dis
</span><span class="line">&gt;&gt;&gt; dis.dis(update_dict)
</span><span class="line">  3           0 LOAD_CONST               1 (1)
</span><span class="line">              3 LOAD_GLOBAL              0 (d)
</span><span class="line">              6 LOAD_CONST               2 ('a')
</span><span class="line">              9 STORE_SUBSCR                        # single bytecode instruction
</span><span class="line">             10 LOAD_CONST               0 (None)
</span><span class="line">             13 RETURN_VALUE</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So what are the caveats? Is it safe to rely on atomicity instead of using locks?</p>

<p>First, the linked FAQ above doesn’t make it clear to what degree this behavior is considered part of the Python spec as opposed to simply a consequence of CPython implementation details.
It depends on the GIL, so it would likely be unsafe on GIL-less Pythons (IronPython, Jython, PyPy-TM).
Would it be safe on non-CPython implementations with a GIL (PyPy)?
I could certainly imagine possible optimizations that would invalidate the atomicity of these operations.</p>

<p>Second, even if not strictly necessary, locks provide clear thread-safety guarantees and also serve as useful documentation that the code is accessing shared memory.
Without a lock, care must be taken since it could be easy to assume operations are atomic when they are not (postmortem example: <a href="https://emptysqua.re/blog/pythons-swap-is-not-atomic/">Python’s swap is not atomic</a>).
A clear comment is probably also necessary to head off the “Wait, this might need a lock!” reaction from collaborators.</p>

<p>Third, because Python allows overriding of so many builtin methods, there are edge cases where these operations are no longer atomic. The <a href="https://google.github.io/styleguide/pyguide.html#Threading">Google Python style guide</a> advises:</p>

<blockquote>
  <p>Do not rely on the atomicity of built-in types.</p>

  <p>While Python’s built-in data types such as dictionaries appear to have atomic operations, there are corner cases where they aren’t atomic (e.g. if <strong>hash</strong> or <strong>eq</strong> are implemented as Python methods) and their atomicity should not be relied upon. Neither should you rely on atomic variable assignment (since this in turn depends on dictionaries).</p>
</blockquote>

<p>That pretty much settles it for the general case.</p>

<p>There may still be some cases where it would be necessary, such as when implementing new locking functionality or in cases where performance is critical.
Relying on atomicity of operations effectively allows you to piggyback on the GIL for your locking, reducing the cost of additional locks.
But if lock performance is so critical, it seems like it would be better to first profile hotspots and look for other speedups.</p>

<p>So does it make sense to rely on the atomicity of operations when accessing or modifying shared mutable state?</p>

<p>Short answer:<br />
1. you’d better have a good reason<br />
2. you’d better do some thorough research  </p>

<p>Otherwise, you’re better off just using a lock.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Notes: The Architecture of Open Source Applications II]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/reading-notes-the-architecture-of-open-source-applications/"/>
    <updated>2016-05-01T16:37:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/reading-notes-the-architecture-of-open-source-applications</id>
    <content type="html"><![CDATA[<p>Earlier this year, I read <a href="http://aosabook.org/en/buy.html#vol2"><em>The Architecture of Open Source Applications, Volume II: Structure, Scale, and a Few More Fearless Hacks</em></a>.</p>

<p>It was an excellent read, and fills a gap in the market for software engineering books:</p>

<blockquote>
  <p>Architects look at thousands of buildings during their training, and study critiques of those buildings written by masters. In contrast, most software developers only ever get to know a handful of large programs well - usually programs they wrote themselves - and never study the great programs of history. As a result, they repeat one another’s mistakes rather than building on one another’s successes. This second volume of The Architecture of Open Source Applications aims to change that. In it, the authors of twenty-four open source applications explain how their software is structured, and why. What are each program’s major components? How do they interact? And what did their builders learn during their development? In answering these questions, the contributors to this book provide unique insights into how they think.</p>
</blockquote>

<p>Every chapter of AOS2 is a guided tour of an interesting codebase, with all of the hard-earned design wisdom distilled down to specific advice.</p>

<p>Though the chapters are mostly free-form, there are a few repeating themes that crop up throughout, allowing comparisons between the approaches taken in different problem domains:<br />
1. Modularity<br />
2. Testing<br />
3. The danger of expecting to be able to predict the future  </p>

<p>Here are my personal favorites — chapters that stood out as being especially clearly-written and thought-provoking:<br />
1. Scalable Web Architecture and Distributed Systems<br />
2. FreeRTOS<br />
3. The Glasgow Haskell Compiler<br />
4. GPSD<br />
5. nginx<br />
6. Twisted<br />
7. Yesod<br />
8. ZeroMQ  </p>

<p>The full content is available to <a href="http://aosabook.org/en/index.html">read for free online</a>, and all profits from <a href="http://aosabook.org/en/buy.html#vol2">hard copy sales</a> go to charity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Hash Collisions]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/git-hash-collisions/"/>
    <updated>2016-05-01T14:40:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/git-hash-collisions</id>
    <content type="html"><![CDATA[<p>While re-reading <em>The Architecture of Open Source Applications, Volume II</em>, a line in the <a href="http://aosabook.org/en/git.html">chapter on git</a> caught my eye:</p>

<blockquote>
  <p>if two objects are different they will have different SHAs.</p>
</blockquote>

<p>This was surprising, as there should always be be some very very small but nonzero chance of a hash collision. Either the book is simplifying for ease of explanation, or git is doing something behind the scenes that is more complicated than simply hashing the contents of the object.</p>

<p>It turns out that hash collisions are possible.</p>

<p>As expected, an accidental collision is very unlikely: on even a large and active repo, a collision is unlikely to occur in the timespan of the <a href="http://diego.assencio.com/?index=eacd6eedf46c9dd596a5f12221ad15b8">age of the universe</a>.</p>

<p>Even if an attacker could break SHA-1 or brute-force a hash, <a href="http://stackoverflow.com/a/9392525">git always prefers the older version of an object</a>, so the attacker would be unable to replace an existing file with a tainted version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Fountain]]></title>
    <link href="http://qqrs.github.com/blog/2015/12/15/time-fountain/"/>
    <updated>2015-12-15T21:00:00-05:00</updated>
    <id>http://qqrs.github.com/blog/2015/12/15/time-fountain</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://qqrs.github.com/images/timefountain.jpg" title="'Time fountain'" /></p>

<h2 id="inspiration">Inspiration</h2>

<p>The first time I remember seeing a time fountain was a
<a href="http://cre.ations.net/creation/the-time-fountain">blog post by Nate True from 2006</a>
<a href="http://web.archive.org/web/20150414033350/http://cre.ations.net/creation/the-time-fountain">(archive.org)</a>.</p>

<h2 id="operation">Operation</h2>

<p>The time fountain works by using flashes from UV LEDs to illuminate falling drops of fluorescent dye.
If the drops fall at a consistent rate, the UV LEDs can be flashed at the same frequency as the drops are falling so that the drops appear to be suspended in mid-air. Or, if there is a small frequency differential, it appers that the drops are rising upward.</p>

<p><a href="http://www.eccentricgenius.com/wp/2006/08/10/stopping-time-visually/">This blog post</a>
<a href="http://web.archive.org/web/20070603015657/http://www.eccentricgenius.com/wp/2006/08/10/stopping-time-visually/">(archive.org)</a> provides a more detailed explanation.</p>

<h2 id="construction">Construction</h2>

<p>I used a 555-timer configured for <a href="http://pcbheaven.com/wikipages/555_Theory/?p=1">low-duty-cycle astable operation</a>, with a 100 uF timing capacitor, 100 ohm resistor on the charging path, and 10k ohm pot on the discharging path. This corresponded to roughly 15 ms on-time and 0.5 Hz to 20 Hz frequency. An n-channel FET switches the LEDs.</p>

<p>While it would be nice to detect drops and reset the cycle so phase errors don’t accumulate, the effect is still pretty good with a simple timer as long as you have consistent drops.</p>

<p>I bought some fluorescein dye from Ebay but it turns out that highlighter dye works just fine and doesn’t precipitate out of solution like the fluorescein. I diluted the dye from one highlighter into about 100 mL of water.</p>

<p>To make the drops I started by punching a hole in a food container with a needle, but wasn’t able to achieve the consistency I wanted.
The best solution I found was to punch a hole in the bottom of the container and use a <a href="http://www.amazon.com/Uxcell-Plastic-Aquarium-Control-Valves/dp/B00ZRHB5NW">fish tank aeration valve</a>, sealing with super glue.
This was able to produce consistent drops, with an easily adjustable drop rate.</p>

<h2 id="action">Action</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/y3eXu-68REc" frameborder="0" allowfullscreen=""></iframe>

<p>It’s a cool effect to see in person, but difficult to capture on camera because of the lighting conditions. Here are a few videos that do a better job of showing off the effect:<br />
<a href="https://www.youtube.com/watch?v=rvY7NGncCgU">video 1</a><br />
<a href="https://www.youtube.com/watch?v=XwYIE-82i6Y">video 2</a><br />
<a href="https://www.youtube.com/watch?v=CaDtZA78uP0">video 3</a>  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proofing Spirits with a Homemade Electrobalance]]></title>
    <link href="http://qqrs.github.com/blog/2015/08/21/proofing-spirits-with-homemade-electrobalance/"/>
    <updated>2015-08-21T20:04:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2015/08/21/proofing-spirits-with-homemade-electrobalance</id>
    <content type="html"><![CDATA[<div style="position:relative;padding-bottom:calc(100% / 1.78)"><iframe src="https://gfycat.com/ifr/PoliticalHarmoniousAracari" frameborder="0" scrolling="no" width="100%" height="100%" style="position:absolute;top:0;left:0;" allowfullscreen=""></iframe></div>

<p>A panel voltmeter can be used to build a milligram-range electrobalance, which turns out to produce surprisingly linear measurements.</p>

<p>Using a bare-bones panel meter electrobalance, I attempted to measure the proof of alcohol by tracking evaporation over time.</p>

<h2 id="electrobalance">Electrobalance</h2>
<p>A <a href="http://www.allaboutcircuits.com/textbook/direct-current/chpt-8/what-is-a-meter/">typical panel meter</a> passes a current through a coil to generate a magnetic field,
which generates a force in the presence of a permanent magnet and causes the needle to move.</p>

<p>The meter I had at hand is a 0–15V voltmeter, so it includes a 75k resistor in series with the coil in order to present an appropriate input impedance for that voltage range
(think <a href="http://www.allaboutcircuits.com/textbook/direct-current/chpt-10/thevenin-norton-equivalencies/">Thevenin and Norton equivalents</a>).
The coil has a DC resistance of approximately 520 ohms, which means the full-scale current for the coil is about 200 microamps.</p>

<p>To convert the voltmeter into an electrobalance, I replaced the 75k resistor with a 1k series resistor and connected an adjustable voltage power supply for testing.
This range permits currents from a few hundred microamps to several milliamps, which is enough to lift small loads without destroying the coil.
However, it’s worth noting that if accuracy were a significant concern, coil heating resulting from the higher-than-rated currents would likely be non-negligible.</p>

<p>I turned the meter on its side and placed the load on the needle, then increased the power supply voltage until the needle was centered and read the current using a multimeter.
One drawback to this simple system is that for repeatable measurements it requires care to ensure the load is placed on the same position along the needle and the needle is raised to the same center point every time.</p>

<div style="position:relative;padding-bottom:calc(100% / 1.33)"><iframe src="https://gfycat.com/ifr/ImpishThisGrouper" frameborder="0" scrolling="no" width="100%" height="100%" style="position:absolute;top:0;left:0;" allowfullscreen=""></iframe></div>

<h2 id="linearity">Linearity</h2>

<p>To test the linearity of the scale I used a set of calibration weights from Ebay.
While they didn’t include a traceable calibration certificate (or make any accuracy claims at all), they were very inexpensive.</p>

<p><img class="center" src="http://qqrs.github.com/images/electrobalance/electrobalance_test_weights.jpg" title="'Test weight set'" /></p>

<p>I made measurements manually across a range of load weights. The plot confirms that the electrobalance is at least linear enough for further investigation.</p>

<p><img class="center" src="http://qqrs.github.com/images/electrobalance/electrobalance_linearity.png" title="'Electrobalance linearity graph'" /></p>

<h2 id="spirits">Spirits</h2>

<p>I suspected it might be possible to identify the percentage alcohol in a solution by measuring the evaporation curve.</p>

<p>Since alcohol evaporates more easily than water, more alcohol than water can be expected to evaporate at first,
and as the alcohol concentration drops the overall evaporation rate will also slow until it approaches the evaporation rate of pure water.</p>

<p>The evaporation time constant <script type="math/tex"> \tau </script> can found by an exponential fit to <script type="math/tex"> y = ke^{\frac{-t}{\tau}} </script>.</p>

<p><img class="center" src="http://qqrs.github.com/images/electrobalance/electrobalance_evaporation_slivovitz.png" title="'Electrobalance 40% EtOH evaporation graph'" /></p>

<p>I took data by weighing cotton samples dipped in several solutions: tap water, isopropyl alcohol, and ethanol at various proofs.</p>

<p>However, from this data, it does not seem to be possible to directly calculate alcohol proof from time constant, though the general trend does seem to hold.</p>

<p>Eliminating the sources of error related to manual measurement and taking more frequent data points during evaporation might provide more conclusive data.
However, it may be the case that a significant component of the evaporation time constant is determined by the surface area of the sample.
With such small samples sizes, it may not be possible to get repeatable measurements without carefully controlling the cotton dimensions and sample volume.</p>

<table>
  <thead>
    <tr>
      <th>Sample</th>
      <th>Evaporation time constant</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>50% IPA</td>
      <td>28.6</td>
    </tr>
    <tr>
      <td>water</td>
      <td>76.9</td>
    </tr>
    <tr>
      <td>20% EtOH</td>
      <td>22.2</td>
    </tr>
    <tr>
      <td>40% EtOH (Slivovitz)</td>
      <td>15.4</td>
    </tr>
    <tr>
      <td>40% EtOH (Slivovitz)</td>
      <td>20.4</td>
    </tr>
    <tr>
      <td>unknown EtOH #1</td>
      <td>20.4</td>
    </tr>
    <tr>
      <td>unknown EtOH #2</td>
      <td>18.5</td>
    </tr>
  </tbody>
</table>

<h2 id="automation">Automation</h2>

<p>Next, I attempted to automate the measurements by adding a photointerruptor to detect the needle position.
When the needle is lowered, an electrical tape flag on the needle blocks the infrared LED from illuminating the phototransistor.
A microcontroller applies power to the coil using a PWM-controlled FET.
When the needle begins to raise, the microcontroller detects the change in phototransistor output.</p>

<p><img class="center" src="http://qqrs.github.com/images/electrobalance/electrobalance_photointerruptor.jpg" title="'Panel meter with photointerruptor'" /></p>

<p><img class="center" src="http://qqrs.github.com/images/electrobalance/electrobalance_photointerruptor_circuit.jpg" title="'Photointerruptor circuit'" /></p>

<p><img class="center" src="http://qqrs.github.com/images/electrobalance/electrobalance_system_diagram.jpg" title="'Electrobalance system diagram'" /></p>

<p>As a first attempt, I programmed the microcontroller to simply ramp the PWM duty cycle until the phototransistor signal changed.
This did the job, but had to be run painfully slowly to produce accurate results.
When the ramp rate was increased, the needle would overshoot, leading to significant variability between measurements.</p>

<div style="position:relative;padding-bottom:calc(100% / 1.78)"><iframe src="https://gfycat.com/ifr/AllCrazyFrogmouth" frameborder="0" scrolling="no" width="100%" height="100%" style="position:absolute;top:0;left:0;" allowfullscreen=""></iframe></div>

<p>I made a quick pass at implementing PID control, but the digital-only feedback and relatively slow response made it difficult to find parameters that would allow the needle to settle.
Since I didn’t want to spend all day tuning control algorithms, I had to leave this part of the project for another time.</p>

<div style="position:relative;padding-bottom:calc(100% / 1.78)"><iframe src="https://gfycat.com/ifr/VerifiableFamousAngora" frameborder="0" scrolling="no" width="100%" height="100%" style="position:absolute;top:0;left:0;" allowfullscreen=""></iframe></div>

<h2 id="inspiration-and-references">Inspiration and References</h2>

<p>The inspiration for this project comes from an article in the Amateur Scientist column of <em>Scientific American</em> that I found years ago,
<a href="http://web.archive.org/web/20011031150021/http://www.scientificamerican.com/2000/1000issue/1000amsci.html">Down Among the Micrograms</a>.</p>

<p>Expanded versions of that article also appeared in several issues of the
<a href="https://web.archive.org/web/20061231172955/http://www.sas.org/tcs/weeklyIssues/2004-11-12/Classics/index.html">Society for Amateur Scientists newsletter</a>
(<a href="https://www.dropbox.com/s/tc96svyovprii1f/microgram_electrobalance.pdf?dl=0">PDF mirror</a>)
(<a href="https://www.dropbox.com/s/fswmy7v7cemjuzv/e-bal.pdf?dl=0">Forth source code mirror</a>).</p>

<p>There are a few other incarnations that are worth a look:<br />
<a href="http://www.sci-spot.com/Mechanical/balance.htm">Digital Balance</a> (sci-spot.com)<br />
<a href="https://www.youtube.com/watch?v=n90whRO-ypE">Weigh an Eyelash—Build a Microgram Scale</a> (Youtube video, Paul Grohe, Texas Instruments)<br />
<a href="http://www.avrfreaks.net/forum/stk-500-based-microgram-scales?page=all">STK-500 based microgram scales</a> (avrfreaks.net forum thread)  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim on a Mechanical Typewriter]]></title>
    <link href="http://qqrs.github.com/blog/2013/05/03/vim-on-a-mechanical-typewriter/"/>
    <updated>2013-05-03T00:00:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2013/05/03/vim-on-a-mechanical-typewriter</id>
    <content type="html"><![CDATA[<div style="position:relative;padding-bottom:calc(100% / 1.33)"><iframe src="https://gfycat.com/ifr/BackGiddyAmericanbittern" frameborder="0" scrolling="no" width="100%" height="100%" style="position:absolute;top:0;left:0;" allowfullscreen=""></iframe></div>

<p style="text-align: right">
<a href="https://www.youtube.com/watch?v=eFBTBwdVobQ" target="_blank">Watch on Youtube (with sound) &gt;&gt;</a>
</p>

<h2 id="inspiration">Inspiration</h2>

<p>I’ve had the idea for this project kicking around for years, but it was only recently that a minimal-assembly-required interfacing scheme presented itself and I found the time to make it happen.</p>

<p>The original inspiration came a long time ago when I read a writeup by someone
who had thoughtfully interfaced a typewriter to a computer so an older relative who wasn’t comfortable using a computer could send email.
I seem to recall that it was an IBM Selectric or similar electric typewriter with serial out.
(It may be <a href="http://hackaday.com/2007/07/25/emailing-typewriter/">this project</a>, but the linked project page has disappeared.)
I thought the idea was fun, but I wanted to use a mechanical typewriter.</p>

<p>At some point, the <a href="http://www.usbtypewriter.com/">USB typewriter</a> project popped up which does exactly that.
The <a href="http://www.usbtypewriter.com/pages/instructions">technical writeup</a> indicates that
it uses a long PCB strip with a laser-cut metal tab for each key.
The tabs are folded over the crossbar on the underside of the typewriter to detect strikes of the key levers on the crossbar.
To detect key strikes, an ATmega168 with a bunch of 74HC595 shift registers strobes the tabs and tests for voltage at a common point shared by the key levers.
It looks like a nicely polished project, and it’s great to see the creator running what appears to be a successful Etsy store while supporting open hardware.</p>

<p>That approach required more assembly work than I wanted to put in, though, so my idea was on hold until I stumbled across the SoftPot while browsing SparkFun.</p>

<h2 id="softpot">SoftPot</h2>

<p><img class="center" src="http://qqrs.github.com/images/typewriter/softpot.jpg" title="SoftPot" />
The SoftPot is a touch-sensitive position sensor produced by <a href="http://www.spectrasymbol.com/potentiometer/softpot">Spectra Symbol</a>.
I’ve written a <a href="http://qqrs.github.com/blog/2013/04/22/interfacing-a-softpot-sensor-to-an-adc/">separate post</a>
describing the SoftPot and documenting how to interface it to a microcontroller ADC,
but for most uses it can be thought of as a momentary-contact potentiometer and can be modeled as a voltage divider.
When touched, the output voltage is proportional to the position of a touch along the length of the sensor.</p>

<p>I installed the SoftPot (a <a href="https://octopart.com/tsp-l-0200-103-1%25-rh-spectra+symbol-19249699">ThinPot TSP-L-0200-103-1%-RH</a>) using its adhesive backing onto the upper side of the crossbar.
The purpose of the crossbar is to advance the carriage by one space after the type hammer leaves its imprint on the page.
To accomplish this, the lever arm for each key applies force to the top of the crossbar when the key is pressed.
Since the key levers are arranged along the length of the crossbar, the position of a hit on the crossbar can be used to determine which key was pressed.</p>

<p>There are a few keys which don’t actuate the crossbar and therefore can’t be detected by the SoftPot: space bar, backspace, shift, and tab.</p>

<p><img class="center" src="http://qqrs.github.com/images/typewriter/typewriter_underside.jpg" title="Typewriter underside" /></p>

<p>I did run into some difficulties mounting the SoftPot securely while still allowing the crossbar to move.
I ended up running the SoftPot connector and wires up around a piece of the typewriter frame, down around another piece, then outward along the underside of the typewriter.
For strain relief I added some electrical tape to secure everything, but I’m still worried that repeated stresses at the connector will eventually damage the SoftPot.
For a more robust build, I would probably either need a SoftPot with a right-angle connector (which I don’t believe is available), or I would need to take a Dremel to the crossbar side support.</p>

<p>There is also a small inactive zone on the far edge of the SoftPot from the connector, so the <code>q</code> and <code>=</code> keys aren’t detected at all.
Mounting the SoftPot with the end curving up onto the crossbar side support might fix this, but it would be at greater risk of slipping or being damaged.
It might be possible to trim the SoftPot by a few millimeters,
but it’s difficult to tell from the datasheet if that would interfere with its operation or expose the internals to air that might degrade it prematurely.</p>

<p>Overall, I’m quite satisfied with the performance of the SoftPot given the limited ambitions of this project.
It’s able to consistently detect keypresses and seems to have no trouble reliably distingushing between adjacent keys.
With some practice, it could easily be installed on a new typewriter in just a few minutes.</p>

<h2 id="raspberry-pi">Raspberry Pi</h2>
<p><img class="right" src="http://qqrs.github.com/images/twilio_light_sensor_adc_daughterboard.jpg" title="ADC daughterboard" />
I had a Raspbery Pi with Microchip MCP3008 ADC daughterboard handy (described in more detail in a <a href="http://qqrs.github.com/blog/2013/04/10/twilio-light-sensor/">separate blog post</a>)
so I used it to take the SoftPot sensor readings.</p>

<p>I added a 100kΩ pulldown resistor to the SoftPot output to prevent the ADC input from floating when no keys are pressed.</p>

<h3 id="software">Software</h3>
<p>The software to read the SoftPot sensor values and convert to keystrokes is written in Python. Source code is here:
<a href="https://github.com/qqrs/ttypewriter">github.com/qqrs/ttypewriter</a>.</p>

<p>The implementation is rough and leaves plenty of room for future improvement, but for purposes of testing out the SoftPot sensor it got the job done.</p>

<p>The script consists of a polling loop that reads the sensor at a fixed delay.
To read values from the MCP3008 ADC, it calls <code>adc_spi.py</code>, which is based on
<a href="http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/necessary-packages">example code</a>
from Adafruit that bit-bangs the SPI communication in software (some versions of the Raspberry Pi did not include hardware SPI).
The script is able to read the sensor at about 100 samples/second.
This is slow but it provided adequate key detection results so I haven’t yet gone on to modify it to do the SPI in a separate thread, use the hardware SPI interface, port to C, etc.</p>

<p>Key up/down state is determined by comparing the sensor value to a fixed threshold of a few ADC counts.
When a key is pressed, the sensor value is recorded until all keys are up.
As a debouncing mechanism, very short keypresses of &lt; 100 ms are discarded.
Otherwise, outlier values are filtered out and the average of the sensor readings is taken.
A calibration file maps sensor reading values to typewriter keys.</p>

<p>One major caveat of this approach is that for a key to be detected correctly, it must be fully released before the next key is pressed.
The potentiometer-like behavior of the SoftPot means that there is no simple means of decoding multiple simultaneous pressed keys.
While it would be useful to improve the software to handle faster typing speeds, in practice the typewriter tends to enforce its own speed limit since sustained fast typing is likely to jam the typeheads.</p>

<p>For output, the script supports writing keypresses to stdout or injecting them into a <code>screen</code> session.</p>

<p>Since the original <code>vi</code> key commands were designed for use over a teletype interface, the <code>vim</code> text editor is very usable without any special keys or modifier keys.
With a <code>vim</code> instance open inside a <code>screen</code> session, <code>jj</code> mapped to <code>Esc</code>, and the key detection script running, the typewriter is usable for text editing.</p>

<h2 id="ideas-for-future-improvements">Ideas for Future Improvements</h2>

<ol>
  <li>Improve the keypress detection algorithm to handle faster typing with overlapping keypresses.</li>
  <li>Add limit switches or reed switches and magnets to detect presses of the keys not detected by the SoftPot.</li>
  <li>Port the code to an Arduino or a microcontroller with a USB HID stack so the typewriter can be used with any computer.</li>
  <li>Add a <a href="https://github.com/alevchuk/vim-clutch">vim clutch</a>.</li>
  <li>Real life <a href="http://writeordie.com/">Write or Die</a>:
port to MSP430 for low standby power consumption, add an SD card, and add an energy harvesting system (piezo? electromechanical?) to capture energy from keypresses.
If you type fast enough you’ll store enough energy to write your work to the SD card before it’s lost!</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-Controlled Bluetooth Double-Bell Alarm Clock]]></title>
    <link href="http://qqrs.github.com/blog/2013/04/30/bluetooth-alarm-clock/"/>
    <updated>2013-04-30T17:29:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2013/04/30/bluetooth-alarm-clock</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://qqrs.github.com/images/btalarm/btalarm_phone_with_alarm.jpg" title="Alarm clock with phone" /></p>

<!--
Careful design is important when it comes to auditory cues, just as it is for visual elements.
Because the connections we make with sounds can have a highly emotional character, auditory cues
work to amplify our experiences.

Some pleasant examples:
A TV that chirrups a "hello" tune when it turns on.
A clothes dryer that rumbles quietly and then respectfully dings a single time to indicate that the cycle is complete.

Some not-so-pleasant examples:
A burglar alarm keypad that plays a confirmation beep slightly out-of-sync with a button press.
A microwave that impatiently beeps that it's finished every minute even though your hands are full elsewhere in the kitchen.
-->

<p>I’ve woken many mornings to a blaring square-wave-through-overdriven-8Ω-speaker alarm tone, wailing for me to come back from the comfortable, warm depths of sleep…</p>

<blockquote>
  <p>If I had to describe the character of an ideal alarm clock, I would say that it should be <strong>persistent</strong> but <strong>polite</strong>.</p>
</blockquote>

<p>As an exercise in curiosity, I bought an analog-face alarm clock with a double-bell ringer and found the alarm sound to be crisp and clear.
However, the clock wasn’t perfect:
the second hand tick-tocked all night long, the alarm ringer was too insistent, and I had to remember to set the alarm every evening.</p>

<p>In search of an improved alarm clock, I decided to modify the clock so it could be controlled by my Android phone.
I stripped out the clock mechanism and added a Bluetooth module, then wrote an Android app to gently ding the alarm ringer when the alarm clock on the phone goes off.</p>

<p>It may not be the perfect alarm clock, but I’ve been very happy with it so far.</p>

<h2 id="hardware">Hardware</h2>

<h3 id="alarm-clock">Alarm Clock</h3>
<p><img class="center" src="http://qqrs.github.com/images/btalarm/btalarm_alarm_interior_sm.jpg" title="Alarm clock interior" />
I used an alarm clock with double-bell mechanical ringer (cost: about $10).
The clock hands are advanced by what appears to be a stepper motor winding built into the mechanism, which is driven by an epoxy-potted timing circuit.
The clock is set by turning knobs to move the hour, minute, and alarm hands.</p>

<p>When the alarm time is reached, an electric circuit is completed by mechanical contact, which turns on a small DC motor to strike the alarm bells—no electronics here!
The DC motor runs from two 1.5V AA batteries in parallel.</p>

<h3 id="bluetooth-module">Bluetooth Module</h3>
<p><img class="center" src="http://qqrs.github.com/images/btalarm/btalarm_rn41_sm.jpg" title="RN-41 Bluetooth module" /></p>

<p>For the Bluetooth interface, I used a
<a href="http://www.rovingnetworks.com/products/RN41">Roving Networks RN-41</a>
Bluetooth module
(update 1/3/2015: if I was picking a Bluetooth module today, I’d take a look at the <a href="http://octopart.com/common-parts-library">Octopart Common Parts Library</a> first).</p>

<p>The module is a fully integrated solution which provides everything needed for a Bluetooth Serial Port Profile (SPP) link.
Bluetooth SPP emulates a serial port: data sent over the Bluetooth link is passed through to the UART pins.
The module also provides several general purpose I/O (GPIO) pins which are controlled by entering a command mode.
The GPIO functionality was exactly what I needed for this project.</p>

<p>For a previous project, I had designed a custom PCB for the RN-41 that I was able to re-use as a breakout board.
GPIO 3 was the most accessible on my PCB so I used it to control the ringer motor.</p>

<p>The RN-41 requires a 3.3V supply.
I had a 5V wall adapter handy so I used it along with a 3.3V LDO regulator to power the RN-41.</p>

<h3 id="rn-41-command-mode">RN-41 Command Mode</h3>
<p>The Roving Networks <a href="http://www.rovingnetworks.com/resources/download/47/Advanced_User_Manual">Advanced User Manual</a>
(update 1/3/2015: unfortunately the page seems to have been removed)
documents the command set for controlling the Bluetooth module.
Sending <code>$$$</code> causes the module to enter command mode where it will interpret received data as configuration commands rather than passing the data through to the UART.
The module stays in command mode until it sees the command <code>---</code>.</p>

<p>Two things to note: every command except <code>$$$</code> is followed by a carriage return character, and,
by default, it is only possible to enter command mode within 60 seconds of cycling power.</p>

<p>To test the Bluetooth link, I used the <a href="https://play.google.com/store/apps/details?id=mobi.dzs.android.BluetoothSPP">Bluetooth SPP</a> Android app.
After pairing with the RN-41 Bluetooth module, I used the Bluetooth SPP app to confirm that it responded to commands as expected,
then modified some configuration settings.</p>

<p>Here are the commands I used:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># one-time configuration -- saved to flash memory
</span><span class="line">SN,btalarm      # set the Bluetooth device name
</span><span class="line">ST,255          # enter command mode at any time (no 60 second window after boot)
</span><span class="line">SQ,4            # disable special functions on GPIO 3 and 6
</span><span class="line">
</span><span class="line"># GPIO control
</span><span class="line">S&amp;,0808         # mask and turn on GPIO 3
</span><span class="line">S&amp;,0800         # mask and turn off GPIO 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="motor-switching">Motor Switching</h3>
<p><img class="center" src="http://qqrs.github.com/images/btalarm/btalarm_sch.png" title="Bluetooth alarm schematic" />
<img class="right" src="http://qqrs.github.com/images/btalarm/btalarm_fet_protoboard_sm.jpg" title="Bluetooth alarm" />
First, I soldered a 1N4004 diode at the motor terminals for flyback suppression.</p>

<p>I didn’t have any test gear handy to see how much current the motor draws.
Since it was powered by two AA batteries in parallel, it seemed safe to assume that it could easily require up to a couple hundred milliamps.</p>

<p>I tried using a MPS2222A NPN transistor to switch the motor.
I found that the motor turned on when forcing the base high through a resistor to +3.3V but not when controlled by the RN-41 GPIO pin.
I suspect the RN-41 GPIO pin was unable to source enough current to drive the transistor into saturation.
However, the datasheet didn’t specify a current limit for the pins and without test gear it wasn’t worth speculating.</p>

<p>I swapped the MPS2222A for an International Rectifier n-channel power FET with 3.3V-tolerant gate threshold.
Success! The Bluetooth module turned on the ringer motor.</p>

<h2 id="android-application">Android application</h2>

<p><a href="http://qqrs.github.com/images/btalarm/full_size/btalarm_screenshot_select_device.png"><img class="right" src="http://qqrs.github.com/images/btalarm/btalarm_screenshot_select_device_sm.png" title="Bluetooth alarm" /></a>
This was my first time creating an Android app so I started out by
<a href="http://developer.android.com/sdk/index.html">installing the SDK</a>
and working through the
<a href="http://developer.android.com/training/basics/firstapp/index.html">Building Your First App</a>
example in the Android developer docs.
The whole process turned out to be very easy—I was running a “Hello, World” app on my phone within a couple of hours.
Quite a contrast to the development tools for some of the microcontroller and FPGA platforms I’ve used in the past!</p>

<p>For the most part, I tested using an actual phone.
While it’s nice that the Android emulator is available, I found it to be very sluggish.</p>

<p>The Android SDK comes with a Bluetooth Chat sample project, which demonstrates how to create a background service in a separate thread to handle Bluetooth communications.
To communicate with the RN-41 module, I found that I needed to change the Bluetooth UUID to the
<a href="http://stackoverflow.com/questions/3072776/android-bluetooth-cant-connect-out">proper value for an SPP connection</a>.
I converted the chat app into a debug terminal, allowing me to send arbitrary commands to the RN-41 or press shortcut buttons for command mode and GPIO control.</p>

<p><a href="http://qqrs.github.com/images/btalarm/full_size/btalarm_screenshot_debug.png"><img class="left" src="http://qqrs.github.com/images/btalarm/btalarm_screenshot_debug_sm.png" title="Bluetooth alarm" /></a>
I ran into an error when trying to run the Android example:
<code>getActionBar() call returning null</code>.
A StackOverflow search provided a fix which involved a
<a href="http://stackoverflow.com/questions/6867076/getactionbar-returns-null">change to the <em>AndroidManifest.xml</em> file</a>
for the project.</p>

<p>I thought it would be elegant to trigger the Bluetooth alarm clock from the built-in Nexus 4 Android 4.2 alarm clock so,
ideally, I wanted to find a way to intercept alarm events from the system alarm clock.
I <a href="https://groups.google.com/forum/?fromgroups=#!topic/android-developers/QTpdFvtdRVo">found a post</a> that pointed me in the right direction.
The alarm event can be captured by creating a BroadcastReceiver to receive the <code>com.android.deskclock.ALARM_ALERT</code> action.
Note that alarm events from other alarm clocks (older Android builds, manufacturer/carrier builds, third party apps) will use
<a href="http://stackoverflow.com/a/15876187">different actions</a>.</p>

<p><a href="http://qqrs.github.com/images/btalarm/full_size/btalarm_screenshot_settings.png"><img class="right" src="http://qqrs.github.com/images/btalarm/btalarm_screenshot_settings_sm.png" title="Bluetooth alarm" /></a>
My alarm app is implemented using a background service that registers the BroadcastReceiver to listen for alarm events and starts the ringer when an event occurs.
The service is loaded when the app is installed or the phone is powered up.
Since I wanted to support a “repeated ding” ringer style, I also created a separate alarm ringer background service thread
to support sending a timed pattern of Bluetooth commands, with pauses.</p>

<p>I wanted to be able to set configuration options to enable/disable the alarm, change the ringer style, and save the selected Bluetooth device
so I created the appropriate UI controls and used the Android SharedPreferences API to store the settings.</p>

<p>Full source for the Android application can be found at <a href="https://github.com/qqrs/btalarm">github.com/qqrs/btalarm</a>.</p>

<h3 id="acknowledgments">Acknowledgments</h3>

<p>This was a project I worked on at <a href="http://www.hackerschool.com">Hacker School</a>.
Hacker School is a free three-month self-directed learning environment
that has been described as being “like a writers’ retreat for programmers.”</p>

<p>Many thanks to <a href="http://twitter.com/leocadiotine">@leocadiotine</a> for repeatedly offering expert guidance in navigating the intricacies of the Android APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interfacing a SoftPot Membrane Potentiometer]]></title>
    <link href="http://qqrs.github.com/blog/2013/04/22/interfacing-a-softpot-sensor-to-an-adc/"/>
    <updated>2013-04-22T12:26:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2013/04/22/interfacing-a-softpot-sensor-to-an-adc</id>
    <content type="html"><![CDATA[<h3 id="softpot">SoftPot?</h3>
<p><img class="right" src="http://qqrs.github.com/images/softpot_200px_01.jpg" title="'SoftPot'" /></p>

<p>The SoftPot is a touch–sensitive position sensor produced by <a href="http://www.spectrasymbol.com/potentiometer/softpot">Spectra Symbol</a>.
It is available in a variety of sizes and configurations for linear and angular position measurements.
There are also two related product lines: the ThinPot, which is narrower, and the HotPot, which is rated for higher temperature operation.</p>

<p>A SoftPot acts as a momentary–contact potentiometer. 
When a finger or mechanical stylus presses down on the sensor area, a top conductive shunt layer makes contact with a lower resistive layer.
The top layer serves the same purpose as a movable wiper in a traditional rotary potentiometer, dividing the resistive layer into two segments around the point of contact. </p>

<p>More detail on the SoftPot can be found at the <a href="http://itp.nyu.edu/physcomp/sensors/Reports/SoftPot">NYU ITP Sensor Workshop</a>
(update 1/2/2015: unfortunately the page seems to have been removed and is not available from web.archive.org).</p>

<p>Several vendors sell the SoftPot in small quantities, including <a href="http://www.sparkfun.com">SparkFun</a>, <a href="http://www.adafruit.com/">Adafruit</a>, and <a href="http://www.digikey.com/">Digikey</a>.</p>

<p>While reading up on the SoftPot to prepare for using it in a project, I found that a number of people posting in the SparkFun comments had run into problems
since the datasheet is pretty sparse and there are few other resources available.
It’s a pretty handy sensor for certain applications and it would be a shame to see people avoiding it due to the limited documentation.</p>

<h3 id="interfacing-a-softpot">Interfacing a SoftPot</h3>
<p><img class="right" src="http://qqrs.github.com/images/softpot_pot_divider.png" title="'Potentiometer voltage divider'" />
The SoftPot datasheet indicates that it can be interfaced in the same way as a traditional rotary potentiometer.
There are two bus bar pins, which are connected to power (pin 1) and ground (pin 3). 
The datasheet refers to pin 2 as the “collector,” which is analogous to the wiper in a rotary potentiometer.
With power and ground connected, the collector voltage is proportional to the position of the touch along the length of the SoftPot.</p>

<p>This configuration works fine as long as the SoftPot is always activated by a touch.
However, it is not immediately clear from the datasheet how the sensor responds when not touched.</p>

<p>I connected my SoftPot (part number SP-L-0300-103-1%-RH) to the ADC input of a microcontroller and found that the ADC recorded a slow oscillation of a few hundred millivolts when the SoftPot was not touched.
This seemed to indicate that the SoftPot leaves the collector floating when not touched, so I took some resistance measurements.</p>

<p><img class="right" src="http://qqrs.github.com/images/softpot_connection_diagram.png" title="'Softpot connection diagram'" /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"> </th>
      <th style="text-align: right">Pin 1-3</th>
      <th style="text-align: right">Pin 2-3</th>
      <th style="text-align: right">Pin 1-2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">no touch</td>
      <td style="text-align: right">9.8 kΩ</td>
      <td style="text-align: right">&gt; 10 MΩ</td>
      <td style="text-align: right">&gt; 10 MΩ</td>
    </tr>
    <tr>
      <td style="text-align: left">touch far end</td>
      <td style="text-align: right">9.6 kΩ</td>
      <td style="text-align: right">20 Ω</td>
      <td style="text-align: right">9.6 kΩ</td>
    </tr>
    <tr>
      <td style="text-align: left">touch middle</td>
      <td style="text-align: right">9.5 kΩ</td>
      <td style="text-align: right">4.7 kΩ</td>
      <td style="text-align: right">4.7 kΩ</td>
    </tr>
    <tr>
      <td style="text-align: left">touch close end</td>
      <td style="text-align: right">9.6 kΩ</td>
      <td style="text-align: right">9.6 kΩ</td>
      <td style="text-align: right">5 Ω</td>
    </tr>
  </tbody>
</table>

<p><br />
That confirmed it. The collector pin is floating when the sensor is not touched.</p>

<p>Also worth noting is that the resistance from pin 1 to 3 decreases slightly when the SoftPot is touched. When touching with a fingernail instead of a fingertip, 
the resistance decrease is smaller, 
so this effect seems to be caused by the conductive shunt layer shorting out a cross section of the resistive layer at the point of contact.</p>

<p><strong>Warning:</strong> By pressing both ends of the SoftPot at the same time it is possible to short power to ground, which can damage the SoftPot. 
This may be unlikely with the linear SoftPot, but is a serious concern for the rotary SoftPot since a stray finger could easily press both ends at the same time.
A resistor in series with the supply pin should protect against this, but will reduce the voltage range of the output.</p>

<h3 id="softpot-with-pulldown">SoftPot with Pulldown</h3>
<p><img class="right" src="http://qqrs.github.com/images/softpot_pot_divider_pulldown.png" title="'Potentiometer voltage divider with pulldown'" /></p>

<p>We need a way to distinguish between a garbage sensor measurement due to the floating collector pin and a good sensor measurement resulting from a touch.
One way to do so is to add a pulldown resistor at the SoftPot collector pin that will hold the ADC input at GND when the SoftPot is not touched.</p>

<p>Adding a pulldown resistor will affect the linearity of the sensor measurement.
The choice of resistance value is a tradeoff: 
it must be small enough to hold the ADC pin near GND but as large as possible to reduce the linearity error introduced in the measurement.</p>

<p><img class="right" src="http://qqrs.github.com/images/softpot_res_divider_pulldown.png" title="'Softpot equivalent circuit with pulldown'" />
The SoftPot can be modeled as two series resistors, 
<script type="math/tex"> R_1 </script> and <script type="math/tex"> R_2 </script>, where  <script type="math/tex"> R_1 + R_2 = 10kΩ </script>.
The touch position can be denoted as <script type="math/tex"> x </script>, with <script type="math/tex"> x = 0.0 </script> corresponding to the close end of the sensor and <script type="math/tex"> x = 1.0 </script> to the far end.
Since the resistances are proportional to touch position, this gives <script type="math/tex"> R_1 = x \cdot 10kΩ </script> and <script type="math/tex"> R_2 = (1-x) \cdot 10kΩ </script>.</p>

<p>When a pulldown resistor <script type="math/tex"> R_o </script> is added, it combines in parallel with <script type="math/tex"> R_1 </script> 
and the voltage at the ADC input can be calculated as 
<script type="math/tex"> V_{out} = \frac{R_1 \| R_o}{(R_1 \| R_o) + R_2}\cdot{V_{cc}} </script>,
where <script type="math/tex"> R_1 \| R_o = (\frac{1}{R_1} + \frac{1}{R_o})^{-1} </script>.</p>

<p>To illustrate the effect of the pulldown resistor on sensor linearity, 
the top plot below shows <script type="math/tex"> \frac{V_{out}}{V_{cc}} </script> vs. touch position for four values of <script type="math/tex"> R_o </script>: 1 kΩ, 10 kΩ, 100 kΩ, and 1 MΩ.
The bottom plot shows linearity error, which is the percentage difference from a true linear response due to the effect of the pulldown resistor.
(Python/matplotlib source code <a href="http://gist.github.com/qqrs/4107845">here</a>).</p>

<p><img class="center" src="http://qqrs.github.com/images/softpot_pulldown_error_sm.png" title="'SoftPot Pulldown Error'" /></p>

<p>The following table shows the maximum linearity error for each pulldown resistance value. </p>

<table>
  <thead>
    <tr>
      <th style="text-align: right"><script type="math/tex"> R_o </script></th>
      <th style="text-align: right">max error (%)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">1 kΩ</td>
      <td style="text-align: right">71.4%</td>
    </tr>
    <tr>
      <td style="text-align: right">10 kΩ</td>
      <td style="text-align: right">20.0%</td>
    </tr>
    <tr>
      <td style="text-align: right">100 kΩ</td>
      <td style="text-align: right">2.4%</td>
    </tr>
    <tr>
      <td style="text-align: right">1 MΩ</td>
      <td style="text-align: right">0.2%</td>
    </tr>
  </tbody>
</table>

<p><br />
A good rule of thumb for most circuits is to choose a pulldown resistor an order of magnitude larger than the output resistance of the signal source.
It seems to hold in this case:
any value that is at least 100 kΩ is reasonable, depending on the specifics of the application.</p>

<h3 id="conclusion">Conclusion</h3>
<p>The SoftPot can be treated like a traditional rotary potentiometer, except when the sensor is not touched. 
When not touched, the sensor output at the collector pin is left floating.
Taking this into account, here are three possibilities for using the sensor:</p>

<ol>
  <li>Add a pulldown resistor of approximately 100kΩ – 1MΩ to hold the sensor output at GND when not touched.</li>
  <li>Design the device such that a stylus or other object is in continuous mechanical contact with the SoftPot.</li>
  <li>Use some additional means of detecting touch events, such as a limit switch or capacitive touch sensor. Only read the SoftPot output when a touch has been detected.</li>
</ol>

<p>Finally, this may not apply to most applications, but if there is a possibility the SoftPot could be touched simultaneously at both ends for an extended period of time
it should be protected with a supply–pin series resistor or other current–limiting circuit.</p>

<p>That’s it. The SoftPot is a useful sensor with many possibilities for interesting projects!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Voice– and SMS–Enabled Light Sensor using Raspberry Pi and Twilio]]></title>
    <link href="http://qqrs.github.com/blog/2013/04/10/twilio-light-sensor/"/>
    <updated>2013-04-10T12:59:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2013/04/10/twilio-light-sensor</id>
    <content type="html"><![CDATA[<p>This was a quick project created in collaboration with <a href="http://twitter.com/leocadiotine">@leocadiotine</a>
at <a href="http://www.hackerschool.com">Hacker School</a>. Hacker School is a free three–month self–directed learning environment
that has been described as being “like a writers’ retreat for programmers.”</p>

<p>Thanks go to <a href="http://twitter.com/sashalaundy">@sashalaundy</a> for the introduction to the Twilio API that sparked the idea.</p>

<h2 id="overview">Overview</h2>

<p><img class="right" src="http://qqrs.github.com/images/twilio_light_sensor_text_message.png" title="'Text message response'" />
The Hacker School space for our batch had two restrooms: one attached to the main work area, and one downstairs. 
We thought it would nice to know if the bathroom is occupied before taking the time to walk down.</p>

<p>Our project makes it possible to check the bathroom status by phone or text message.</p>

<p>Bathroom occupancy status is determined using a light sensor attached to a Raspberry Pi. 
If the lights are on in the bathroom, we assume that the bathroom is occupied.</p>

<p>We created a Heroku–hosted web application that accepts periodic bathroom state updates from the Raspberry Pi and handles incoming requests from Twilio. 
When a user calls or texts the Twilio phone number, Twilio sends a request to the web app, which responds with an appropriate message to be spoken or texted to the user.</p>

<p>In addition to the voice/SMS interface, <a href="http://twitter.com/gelstudios">@gelstudios</a> created a nice web interface for the project.</p>

<h2 id="server">Server</h2>

<h3 id="twilio">Twilio</h3>
<p>Twilio is a web–based service for sending and receiving phone calls and SMS text messages.
It provides an easy–to–use API accessible via HTTP and a convenient Python package.
A free trial of the service is available (which inserts small nag notices into outgoing messages).
We used the <a href="http://www.twilio.com/docs/quickstart/python">Twilio Python Quickstart Tutorials</a> as our introduction.</p>

<h3 id="heroku">Heroku</h3>
<p>Heroku is a service that provides a complete, integrated stack for hosting web applications with a range of choices in language, framework, web server and data store.
We created the server application for the project in Python using the Flask microframework. 
The Heroku Dev Center article <a href="http://devcenter.heroku.com/articles/python">Getting Started with Python on Heroku</a> is a good walkthrough for setting up Flask on Heroku.</p>

<h3 id="server-code">Server Code</h3>
<p>Full source for the web application can be found at <a href="https://github.com/qqrs/twilio-light-sensor-server/blob/master/run.py">github.com/qqrs/twilio-light-sensor-server/blob/master/run.py</a>.</p>

<p>The <code>/twilio/voice</code> and <code>/twilio/text</code> routes handle requests from Twilio. 
When a user calls or sends an SMS message to the phone number assigned to our account, Twilio is configured so that it will make an HTTP POST request to these routes.
When the server receives the request from Twilio, it generates an appropriate message indicating the status of the bathroom. 
The message is returned to Twilio in the HTTP response and is sent to the user as either audio (by text–to–speech) or as an SMS message.</p>

<p>The <code>/update</code> route accepts sensor state updates from the remote sensor via HTTP POST. 
Each request includes <code>sensor_id</code> and <code>sensor_val</code> parameters to identify
the sensor and report the current value. </p>

<h2 id="remote-sensor">Remote Sensor</h2>
<p><a href="http://qqrs.github.com/images/twilio_light_sensor_rpi_hardware.jpg"><img class="right" src="http://qqrs.github.com/images/twilio_light_sensor_rpi_hardware.jpg" title="Raspberry Pi with ADC daughterboard and CdS photocell" /></a></p>

<h3 id="raspberry-pi">Raspberry Pi</h3>
<p>The <a href="http://www.raspberrypi.org/">Raspberry Pi</a> is a single–board computer with an ARM–core processor, SD card slot, HDMI and composite video, USB, and optional Ethernet
that is able to run a full distribution of Linux.
Though similar ARM dev boards and single–board computers have
<a href="http://beagleboard.org/">existed</a>
for <a href="http://www.embeddedarm.com/products/arm-sbc.php">years</a>,
the Raspberry Pi was able to hit an enticing price point of $35 (with Ethernet) while still including many of the attractive features of more expensive boards.</p>

<p>A 5V USB power supply and an SD card with an operating system installed are required to begin using the Raspberry Pi. 
A good guide to getting started can be found at the <a href="http://elinux.org/RPi_Beginners">elinux.org wiki</a>.
Preloaded SD cards can be purchased from several vendors or an operating system image can be <a href="http://elinux.org/RPi_Easy_SD_Card_Setup">loaded onto a blank SD card</a>.</p>

<p>Note that it is important to have a stable power supply. Some USB 5V supplies may be inadequate. 
I experienced SD card corruption several times until I bought a <a href="http://www.amazon.com/dp/B008R97TOQ">good supply</a> 
and set <code>over_voltage=2</code> in the config.txt file as described <a href="http://raspberrypi.stackexchange.com/questions/2069/filesystem-corruption-on-the-sd-card">here</a>.
Any good supply with at least a 1.0 amp current rating should be acceptable.</p>

<p><a href="http://qqrs.github.com/images/twilio_light_sensor_photocell_sch.jpg"><img class="right" src="http://qqrs.github.com/images/twilio_light_sensor_photocell_sch.jpg" width="139" title="Photocell schematic" /></a></p>

<h3 id="light-sensor">Light Sensor</h3>
<p>The light sensor is a 10k CdS photocell, interfaced to a Raspberry Pi with an analog–to–digital converter (ADC) daughterboard. The light sensor is connected to an input of the ADC in a voltage divider configuration with a 10k resistor. With illumination from overhead lighting, the resistance of the photocell drops to about 1.5k.</p>

<h3 id="adc-daughterboard">ADC Daughterboard</h3>
<p><img class="right" src="http://qqrs.github.com/images/twilio_light_sensor_adc_daughterboard.jpg" title="ADC daughterboard" />
An analog–to–digital converter (ADC) is required to read the signal from the light sensor. 
The Raspberry Pi does not have an integrated ADC like the Arduino and many microcontroller dev boards. 
However, it is straightforward to interface an external ADC via the SPI or I²C buses. 
Adafruit provides a good guide to using the Microchip MCP3008: 
<a href="http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/overview">Analog Inputs for Raspberry Pi Using the MCP3008</a>.</p>

<p>I had soldered up an MCP3008 on protoboard for another project so I reused it for this project.</p>

<p>A number of assembled <a href="http://elinux.org/RPi_Expansion_Boards">expansion boards</a> that provide an ADC are available from third–party vendors.</p>

<h3 id="raspberry-pi-remote-sensor-monitoring-script">Raspberry Pi Remote Sensor Monitoring Script</h3>
<p>Adafruit provides <a href="http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/script">sample code</a> 
in Python to read from the ADC via the SPI bus.</p>

<p>Full source for the remote sensor monitoring script can be found at <a href="https://github.com/qqrs/twilio-light-sensor-remote/blob/master/twilio_light_sensor.py">github.com/qqrs/twilio-light-sensor-remote/blob/master/twilio_light_sensor.py</a>.</p>

<p>The monitoring script consists of a polling loop that reads the sensor at a defined interval. 
It calls <code>readadc()</code>, a function provided by Adafruit that bit–bangs the SPI communication in software (some versions of the Raspberry Pi did not include hardware SPI).
Sensor state is determined by comparing the ADC value to a fixed threshold: if greater than the threshold, the light is assumed to be on.
A moving average is used as a basic low–pass filter to prevent a noisy read from being interpreted as a change in state. 
The sensor state is reported to the server via an HTTP POST request by <code>update_server_state()</code> whenever the sensor state changes, or at least every 60 seconds when it has not changed.</p>

<p>To run the script, Python packages must be installed. See the Adafruit article
<a href="http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/necessary-packages">here</a>
on installing <code>python-dev</code> and <code>rpi.gpio</code>.
The script can be run at the terminal: <code>python twilio_light_sensor.py</code>. </p>

<p>To run the script automatically at boot, it can be added to the end of <code>/etc/rc.local</code>, 
immediately before the <code>exit 0</code> line:
<code>python /home/pi/twilio_light_sensor/twilio_light_sensor.py &amp;</code>
(modifying the path to script if necessary). </p>

<p>Note that the trailing ampersand <code>&amp;</code> is required. This forks a subshell and allows the rest of the init sequence to complete.
The script can be stopped by switching to another tty with Ctrl–Alt–F2, logging in, finding the process ID with <code>ps aux | grep twilio</code>, and killing the process with <code>kill &lt;pid&gt;</code>.</p>

<h2 id="success">Success</h2>
<p>With the server running on Heroku and the light sensor attached to the Raspberry Pi, Twilio responds to text messages or voice calls: <code>The bathroom is vacant</code> or <code>The bathroom is occupied</code>. Success!</p>
]]></content>
  </entry>
  
</feed>
