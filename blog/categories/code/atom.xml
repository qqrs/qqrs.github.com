<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | ]]></title>
  <link href="http://qqrs.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://qqrs.github.com/"/>
  <updated>2016-05-01T18:53:14-04:00</updated>
  <id>http://qqrs.github.com/</id>
  <author>
    <name><![CDATA[Russell Smith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Which Python operations are atomic?]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/which-python-operations-are-atomic/"/>
    <updated>2016-05-01T18:52:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/which-python-operations-are-atomic</id>
    <content type="html"><![CDATA[<p>A conversation with a coworker turned me on to the fact that a surprising range of operations in Python are atomic, even operations like dictionary and class member assignment.</p>

<p>This wasn’t something I would have anticipated, given the number of machine language instructions that must ultimately be performed to complete an operation like hash table insertion.</p>

<p>Why?</p>

<p>The <a href="https://docs.python.org/2/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe">Python FAQ</a> provides explanation and a full list of atomic operations, but the short answer is:</p>

<ol>
  <li>The Python bytecode interpreter only switches between threads between bytecode instructions</li>
  <li>The Global Interpreter Lock (GIL) only allows a single thread to execute at a time</li>
  <li>Many operations translate to a single bytecode instruction</li>
</ol>

<p>It’s easy to check whether an operation compiles to a single bytecode instruction with <code>dis</code>.</p>

<p><code>
&gt;&gt;&gt; def update_dict():
...     d['a'] = 1
...
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(update_dict)
  3           0 LOAD_CONST               1 (1)
              3 LOAD_GLOBAL              0 (d)
              6 LOAD_CONST               2 ('a')
              9 STORE_SUBSCR                        # single bytecode instruction
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE
</code></p>

<p>So what are the caveats? Is it safe to rely on atomicity instead of using locks?</p>

<p>First, the linked FAQ above doesn’t make it clear to what degree this behavior is considered part of the Python spec as opposed to simply a consequence of CPython implementation details.
It depends on the GIL, so it would likely be unsafe on GIL-less Pythons (IronPython, Jython, PyPy-TM).
Would it be safe on non-CPython implementations with a GIL (PyPy)?
I could certainly imagine possible optimizations that would invalidate the atomicity of these operations.</p>

<p>Second, even if not strictly necessary, locks provide clear thread-safety guarantees and also serve as useful documentation that the code is accessing shared memory.
Without a lock, care must be taken since it could be easy to assume operations are atomic when they are not (postmortem example: <a href="https://emptysqua.re/blog/pythons-swap-is-not-atomic/">Python’s swap is not atomic</a>).
A clear comment is probably also necessary to head off the “Wait, this might need a lock!” reaction from collaborators.</p>

<p>Third, because Python allows overriding of so many builtin methods, there are edge cases where these operations are no longer atomic. The <a href="https://google.github.io/styleguide/pyguide.html#Threading">Google Python style guide</a> advises:</p>

<blockquote>
  <p>Do not rely on the atomicity of built-in types.</p>

  <p>While Python’s built-in data types such as dictionaries appear to have atomic operations, there are corner cases where they aren’t atomic (e.g. if <strong>hash</strong> or <strong>eq</strong> are implemented as Python methods) and their atomicity should not be relied upon. Neither should you rely on atomic variable assignment (since this in turn depends on dictionaries).</p>
</blockquote>

<p>That pretty much settles it for the general case.</p>

<p>There may still be some cases where it would be necessary, such as when implementing new locking functionality or in cases where performance is critical.
Relying on atomicity of operations effectively allows you to piggyback on the GIL for your locking, reducing the cost of additional locks.
But if lock performance is so critical, it seems like it would be better to first profile hotspots and look for other speedups.</p>

<p>So does it make sense to rely on the atomicity of operations when accessing or modifying shared mutable state?</p>

<p>Short answer:<br />
1. you’d better have a good reason<br />
2. you’d better do some thorough research  </p>

<p>Otherwise, you’re better off just using a lock.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Notes: The Architecture of Open Source Applications II]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/reading-notes-the-architecture-of-open-source-applications/"/>
    <updated>2016-05-01T16:37:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/reading-notes-the-architecture-of-open-source-applications</id>
    <content type="html"><![CDATA[<p>Earlier this year, I read <a href="http://aosabook.org/en/buy.html#vol2"><em>The Architecture of Open Source Applications, Volume II: Structure, Scale, and a Few More Fearless Hacks</em></a>.</p>

<p>It was an excellent read, and fills a gap in the market for software engineering books:</p>

<blockquote>
  <p>Architects look at thousands of buildings during their training, and study critiques of those buildings written by masters. In contrast, most software developers only ever get to know a handful of large programs well - usually programs they wrote themselves - and never study the great programs of history. As a result, they repeat one another’s mistakes rather than building on one another’s successes. This second volume of The Architecture of Open Source Applications aims to change that. In it, the authors of twenty-four open source applications explain how their software is structured, and why. What are each program’s major components? How do they interact? And what did their builders learn during their development? In answering these questions, the contributors to this book provide unique insights into how they think.</p>
</blockquote>

<p>Every chapter of AOS2 is a guided tour of an interesting codebase, with all of the hard-earned design wisdom distilled down to specific advice.</p>

<p>Though the chapters are mostly free-form, there are a few repeating themes that crop up throughout, allowing comparisons between the approaches taken in different problem domains:<br />
1. Modularity<br />
2. Testing<br />
3. The danger of expecting to be able to predict the future  </p>

<p>Here are my personal favorites — chapters that stood out as being especially clearly-written and thought-provoking:<br />
1. Scalable Web Architecture and Distributed Systems<br />
2. FreeRTOS<br />
3. The Glasgow Haskell Compiler<br />
4. GPSD<br />
5. nginx<br />
6. Twisted<br />
7. Yesod<br />
8. ZeroMQ  </p>

<p>The full content is available to <a href="http://aosabook.org/en/index.html">read for free online</a>, and all profits from <a href="http://aosabook.org/en/buy.html#vol2">hard copy sales</a> go to charity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Hash Collisions]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/git-hash-collisions/"/>
    <updated>2016-05-01T14:40:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/git-hash-collisions</id>
    <content type="html"><![CDATA[<p>While re-reading <em>The Architecture of Open Source Applications, Volume II</em>, a line in the <a href="http://aosabook.org/en/git.html">chapter on git</a> caught my eye:</p>

<blockquote>
  <p>if two objects are different they will have different SHAs.</p>
</blockquote>

<p>This was surprising, as there should always be be some very very small but nonzero chance of a hash collision. Either the book is simplifying for ease of explanation, or git is doing something behind the scenes that is more complicated than simply hashing the contents of the object.</p>

<p>It turns out that hash collisions are possible.</p>

<p>As expected, an accidental collision is very unlikely: on even a large and active repo, a collision is unlikely to occur in the timespan of the <a href="http://diego.assencio.com/?index=eacd6eedf46c9dd596a5f12221ad15b8">age of the universe</a>.</p>

<p>Even if an attacker could break SHA-1 or brute-force a hash, <a href="http://stackoverflow.com/a/9392525">git always prefers the older version of an object</a>, so the attacker would be unable to replace an existing file with a tainted version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim on a Mechanical Typewriter]]></title>
    <link href="http://qqrs.github.com/blog/2013/05/03/vim-on-a-mechanical-typewriter/"/>
    <updated>2013-05-03T00:00:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2013/05/03/vim-on-a-mechanical-typewriter</id>
    <content type="html"><![CDATA[<div style="position:relative;padding-bottom:calc(100% / 1.33)"><iframe src="https://gfycat.com/ifr/BackGiddyAmericanbittern" frameborder="0" scrolling="no" width="100%" height="100%" style="position:absolute;top:0;left:0;" allowfullscreen=""></iframe></div>

<p style="text-align: right">
<a href="https://www.youtube.com/watch?v=eFBTBwdVobQ" target="_blank">Watch on Youtube (with sound) &gt;&gt;</a>
</p>

<h2 id="inspiration">Inspiration</h2>

<p>I’ve had the idea for this project kicking around for years, but it was only recently that a minimal-assembly-required interfacing scheme presented itself and I found the time to make it happen.</p>

<p>The original inspiration came a long time ago when I read a writeup by someone
who had thoughtfully interfaced a typewriter to a computer so an older relative who wasn’t comfortable using a computer could send email.
I seem to recall that it was an IBM Selectric or similar electric typewriter with serial out.
(It may be <a href="http://hackaday.com/2007/07/25/emailing-typewriter/">this project</a>, but the linked project page has disappeared.)
I thought the idea was fun, but I wanted to use a mechanical typewriter.</p>

<p>At some point, the <a href="http://www.usbtypewriter.com/">USB typewriter</a> project popped up which does exactly that.
The <a href="http://www.usbtypewriter.com/pages/instructions">technical writeup</a> indicates that
it uses a long PCB strip with a laser-cut metal tab for each key.
The tabs are folded over the crossbar on the underside of the typewriter to detect strikes of the key levers on the crossbar.
To detect key strikes, an ATmega168 with a bunch of 74HC595 shift registers strobes the tabs and tests for voltage at a common point shared by the key levers.
It looks like a nicely polished project, and it’s great to see the creator running what appears to be a successful Etsy store while supporting open hardware.</p>

<p>That approach required more assembly work than I wanted to put in, though, so my idea was on hold until I stumbled across the SoftPot while browsing SparkFun.</p>

<h2 id="softpot">SoftPot</h2>

<p><img class="center" src="/images/typewriter/softpot.jpg" title="SoftPot" >
The SoftPot is a touch-sensitive position sensor produced by <a href="http://www.spectrasymbol.com/potentiometer/softpot">Spectra Symbol</a>.
I’ve written a <a href="/blog/2013/04/22/interfacing-a-softpot-sensor-to-an-adc/">separate post</a>
describing the SoftPot and documenting how to interface it to a microcontroller ADC,
but for most uses it can be thought of as a momentary-contact potentiometer and can be modeled as a voltage divider.
When touched, the output voltage is proportional to the position of a touch along the length of the sensor.</p>

<p>I installed the SoftPot (a <a href="https://octopart.com/tsp-l-0200-103-1%25-rh-spectra+symbol-19249699">ThinPot TSP-L-0200-103-1%-RH</a>) using its adhesive backing onto the upper side of the crossbar.
The purpose of the crossbar is to advance the carriage by one space after the type hammer leaves its imprint on the page.
To accomplish this, the lever arm for each key applies force to the top of the crossbar when the key is pressed.
Since the key levers are arranged along the length of the crossbar, the position of a hit on the crossbar can be used to determine which key was pressed.</p>

<p>There are a few keys which don’t actuate the crossbar and therefore can’t be detected by the SoftPot: space bar, backspace, shift, and tab.</p>

<p><img class="center" src="/images/typewriter/typewriter_underside.jpg" title="Typewriter underside" ></p>

<p>I did run into some difficulties mounting the SoftPot securely while still allowing the crossbar to move.
I ended up running the SoftPot connector and wires up around a piece of the typewriter frame, down around another piece, then outward along the underside of the typewriter.
For strain relief I added some electrical tape to secure everything, but I’m still worried that repeated stresses at the connector will eventually damage the SoftPot.
For a more robust build, I would probably either need a SoftPot with a right-angle connector (which I don’t believe is available), or I would need to take a Dremel to the crossbar side support.</p>

<p>There is also a small inactive zone on the far edge of the SoftPot from the connector, so the <code>q</code> and <code>=</code> keys aren’t detected at all.
Mounting the SoftPot with the end curving up onto the crossbar side support might fix this, but it would be at greater risk of slipping or being damaged.
It might be possible to trim the SoftPot by a few millimeters,
but it’s difficult to tell from the datasheet if that would interfere with its operation or expose the internals to air that might degrade it prematurely.</p>

<p>Overall, I’m quite satisfied with the performance of the SoftPot given the limited ambitions of this project.
It’s able to consistently detect keypresses and seems to have no trouble reliably distingushing between adjacent keys.
With some practice, it could easily be installed on a new typewriter in just a few minutes.</p>

<h2 id="raspberry-pi">Raspberry Pi</h2>
<p><img class="right" src="/images/twilio_light_sensor_adc_daughterboard.jpg" title="ADC daughterboard" >
I had a Raspbery Pi with Microchip MCP3008 ADC daughterboard handy (described in more detail in a <a href="/blog/2013/04/10/twilio-light-sensor/">separate blog post</a>)
so I used it to take the SoftPot sensor readings.</p>

<p>I added a 100kΩ pulldown resistor to the SoftPot output to prevent the ADC input from floating when no keys are pressed.</p>

<h3 id="software">Software</h3>
<p>The software to read the SoftPot sensor values and convert to keystrokes is written in Python. Source code is here:
<a href="https://github.com/qqrs/ttypewriter">github.com/qqrs/ttypewriter</a>.</p>

<p>The implementation is rough and leaves plenty of room for future improvement, but for purposes of testing out the SoftPot sensor it got the job done.</p>

<p>The script consists of a polling loop that reads the sensor at a fixed delay.
To read values from the MCP3008 ADC, it calls <code>adc_spi.py</code>, which is based on
<a href="http://learn.adafruit.com/reading-a-analog-in-and-controlling-audio-volume-with-the-raspberry-pi/necessary-packages">example code</a>
from Adafruit that bit-bangs the SPI communication in software (some versions of the Raspberry Pi did not include hardware SPI).
The script is able to read the sensor at about 100 samples/second.
This is slow but it provided adequate key detection results so I haven’t yet gone on to modify it to do the SPI in a separate thread, use the hardware SPI interface, port to C, etc.</p>

<p>Key up/down state is determined by comparing the sensor value to a fixed threshold of a few ADC counts.
When a key is pressed, the sensor value is recorded until all keys are up.
As a debouncing mechanism, very short keypresses of &lt; 100 ms are discarded.
Otherwise, outlier values are filtered out and the average of the sensor readings is taken.
A calibration file maps sensor reading values to typewriter keys.</p>

<p>One major caveat of this approach is that for a key to be detected correctly, it must be fully released before the next key is pressed.
The potentiometer-like behavior of the SoftPot means that there is no simple means of decoding multiple simultaneous pressed keys.
While it would be useful to improve the software to handle faster typing speeds, in practice the typewriter tends to enforce its own speed limit since sustained fast typing is likely to jam the typeheads.</p>

<p>For output, the script supports writing keypresses to stdout or injecting them into a <code>screen</code> session.</p>

<p>Since the original <code>vi</code> key commands were designed for use over a teletype interface, the <code>vim</code> text editor is very usable without any special keys or modifier keys.
With a <code>vim</code> instance open inside a <code>screen</code> session, <code>jj</code> mapped to <code>Esc</code>, and the key detection script running, the typewriter is usable for text editing.</p>

<h2 id="ideas-for-future-improvements">Ideas for Future Improvements</h2>

<ol>
  <li>Improve the keypress detection algorithm to handle faster typing with overlapping keypresses.</li>
  <li>Add limit switches or reed switches and magnets to detect presses of the keys not detected by the SoftPot.</li>
  <li>Port the code to an Arduino or a microcontroller with a USB HID stack so the typewriter can be used with any computer.</li>
  <li>Add a <a href="https://github.com/alevchuk/vim-clutch">vim clutch</a>.</li>
  <li>Real life <a href="http://writeordie.com/">Write or Die</a>:
port to MSP430 for low standby power consumption, add an SD card, and add an energy harvesting system (piezo? electromechanical?) to capture energy from keypresses.
If you type fast enough you’ll store enough energy to write your work to the SD card before it’s lost!</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android-Controlled Bluetooth Double-Bell Alarm Clock]]></title>
    <link href="http://qqrs.github.com/blog/2013/04/30/bluetooth-alarm-clock/"/>
    <updated>2013-04-30T17:29:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2013/04/30/bluetooth-alarm-clock</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/btalarm/btalarm_phone_with_alarm.jpg" title="Alarm clock with phone" ></p>

<!--
Careful design is important when it comes to auditory cues, just as it is for visual elements.
Because the connections we make with sounds can have a highly emotional character, auditory cues
work to amplify our experiences.

Some pleasant examples:
A TV that chirrups a "hello" tune when it turns on.
A clothes dryer that rumbles quietly and then respectfully dings a single time to indicate that the cycle is complete.

Some not-so-pleasant examples:
A burglar alarm keypad that plays a confirmation beep slightly out-of-sync with a button press.
A microwave that impatiently beeps that it's finished every minute even though your hands are full elsewhere in the kitchen.
-->

<p>I’ve woken many mornings to a blaring square-wave-through-overdriven-8Ω-speaker alarm tone, wailing for me to come back from the comfortable, warm depths of sleep…</p>

<blockquote>
  <p>If I had to describe the character of an ideal alarm clock, I would say that it should be <strong>persistent</strong> but <strong>polite</strong>.</p>
</blockquote>

<p>As an exercise in curiosity, I bought an analog-face alarm clock with a double-bell ringer and found the alarm sound to be crisp and clear.
However, the clock wasn’t perfect:
the second hand tick-tocked all night long, the alarm ringer was too insistent, and I had to remember to set the alarm every evening.</p>

<p>In search of an improved alarm clock, I decided to modify the clock so it could be controlled by my Android phone.
I stripped out the clock mechanism and added a Bluetooth module, then wrote an Android app to gently ding the alarm ringer when the alarm clock on the phone goes off.</p>

<p>It may not be the perfect alarm clock, but I’ve been very happy with it so far.</p>

<h2 id="hardware">Hardware</h2>

<h3 id="alarm-clock">Alarm Clock</h3>
<p><img class="center" src="/images/btalarm/btalarm_alarm_interior_sm.jpg" title="Alarm clock interior" >
I used an alarm clock with double-bell mechanical ringer (cost: about $10).
The clock hands are advanced by what appears to be a stepper motor winding built into the mechanism, which is driven by an epoxy-potted timing circuit.
The clock is set by turning knobs to move the hour, minute, and alarm hands.</p>

<p>When the alarm time is reached, an electric circuit is completed by mechanical contact, which turns on a small DC motor to strike the alarm bells—no electronics here!
The DC motor runs from two 1.5V AA batteries in parallel.</p>

<h3 id="bluetooth-module">Bluetooth Module</h3>
<p><img class="center" src="/images/btalarm/btalarm_rn41_sm.jpg" title="RN-41 Bluetooth module" ></p>

<p>For the Bluetooth interface, I used a
<a href="http://www.rovingnetworks.com/products/RN41">Roving Networks RN-41</a>
Bluetooth module
(update 1/3/2015: if I was picking a Bluetooth module today, I’d take a look at the <a href="http://octopart.com/common-parts-library">Octopart Common Parts Library</a> first).</p>

<p>The module is a fully integrated solution which provides everything needed for a Bluetooth Serial Port Profile (SPP) link.
Bluetooth SPP emulates a serial port: data sent over the Bluetooth link is passed through to the UART pins.
The module also provides several general purpose I/O (GPIO) pins which are controlled by entering a command mode.
The GPIO functionality was exactly what I needed for this project.</p>

<p>For a previous project, I had designed a custom PCB for the RN-41 that I was able to re-use as a breakout board.
GPIO 3 was the most accessible on my PCB so I used it to control the ringer motor.</p>

<p>The RN-41 requires a 3.3V supply.
I had a 5V wall adapter handy so I used it along with a 3.3V LDO regulator to power the RN-41.</p>

<h3 id="rn-41-command-mode">RN-41 Command Mode</h3>
<p>The Roving Networks <a href="http://www.rovingnetworks.com/resources/download/47/Advanced_User_Manual">Advanced User Manual</a>
(update 1/3/2015: unfortunately the page seems to have been removed)
documents the command set for controlling the Bluetooth module.
Sending <code>$$$</code> causes the module to enter command mode where it will interpret received data as configuration commands rather than passing the data through to the UART.
The module stays in command mode until it sees the command <code>---</code>.</p>

<p>Two things to note: every command except <code>$$$</code> is followed by a carriage return character, and,
by default, it is only possible to enter command mode within 60 seconds of cycling power.</p>

<p>To test the Bluetooth link, I used the <a href="https://play.google.com/store/apps/details?id=mobi.dzs.android.BluetoothSPP">Bluetooth SPP</a> Android app.
After pairing with the RN-41 Bluetooth module, I used the Bluetooth SPP app to confirm that it responded to commands as expected,
then modified some configuration settings.</p>

<p>Here are the commands I used:</p>

<p>```
# one-time configuration – saved to flash memory
SN,btalarm      # set the Bluetooth device name
ST,255          # enter command mode at any time (no 60 second window after boot)
SQ,4            # disable special functions on GPIO 3 and 6</p>

<h1 id="gpio-control">GPIO control</h1>
<p>S&amp;,0808         # mask and turn on GPIO 3
S&amp;,0800         # mask and turn off GPIO 3
```</p>

<h3 id="motor-switching">Motor Switching</h3>
<p><img class="center" src="/images/btalarm/btalarm_sch.png" title="Bluetooth alarm schematic" >
<img class="right" src="/images/btalarm/btalarm_fet_protoboard_sm.jpg" title="Bluetooth alarm" >
First, I soldered a 1N4004 diode at the motor terminals for flyback suppression.</p>

<p>I didn’t have any test gear handy to see how much current the motor draws.
Since it was powered by two AA batteries in parallel, it seemed safe to assume that it could easily require up to a couple hundred milliamps.</p>

<p>I tried using a MPS2222A NPN transistor to switch the motor.
I found that the motor turned on when forcing the base high through a resistor to +3.3V but not when controlled by the RN-41 GPIO pin.
I suspect the RN-41 GPIO pin was unable to source enough current to drive the transistor into saturation.
However, the datasheet didn’t specify a current limit for the pins and without test gear it wasn’t worth speculating.</p>

<p>I swapped the MPS2222A for an International Rectifier n-channel power FET with 3.3V-tolerant gate threshold.
Success! The Bluetooth module turned on the ringer motor.</p>

<h2 id="android-application">Android application</h2>

<p><a href="/images/btalarm/full_size/btalarm_screenshot_select_device.png"><img class="right" src="/images/btalarm/btalarm_screenshot_select_device_sm.png" title="Bluetooth alarm" ></a>
This was my first time creating an Android app so I started out by
<a href="http://developer.android.com/sdk/index.html">installing the SDK</a>
and working through the
<a href="http://developer.android.com/training/basics/firstapp/index.html">Building Your First App</a>
example in the Android developer docs.
The whole process turned out to be very easy—I was running a “Hello, World” app on my phone within a couple of hours.
Quite a contrast to the development tools for some of the microcontroller and FPGA platforms I’ve used in the past!</p>

<p>For the most part, I tested using an actual phone.
While it’s nice that the Android emulator is available, I found it to be very sluggish.</p>

<p>The Android SDK comes with a Bluetooth Chat sample project, which demonstrates how to create a background service in a separate thread to handle Bluetooth communications.
To communicate with the RN-41 module, I found that I needed to change the Bluetooth UUID to the
<a href="http://stackoverflow.com/questions/3072776/android-bluetooth-cant-connect-out">proper value for an SPP connection</a>.
I converted the chat app into a debug terminal, allowing me to send arbitrary commands to the RN-41 or press shortcut buttons for command mode and GPIO control.</p>

<p><a href="/images/btalarm/full_size/btalarm_screenshot_debug.png"><img class="left" src="/images/btalarm/btalarm_screenshot_debug_sm.png" title="Bluetooth alarm" ></a>
I ran into an error when trying to run the Android example:
<code>getActionBar() call returning null</code>.
A StackOverflow search provided a fix which involved a
<a href="http://stackoverflow.com/questions/6867076/getactionbar-returns-null">change to the <em>AndroidManifest.xml</em> file</a>
for the project.</p>

<p>I thought it would be elegant to trigger the Bluetooth alarm clock from the built-in Nexus 4 Android 4.2 alarm clock so,
ideally, I wanted to find a way to intercept alarm events from the system alarm clock.
I <a href="https://groups.google.com/forum/?fromgroups=#!topic/android-developers/QTpdFvtdRVo">found a post</a> that pointed me in the right direction.
The alarm event can be captured by creating a BroadcastReceiver to receive the <code>com.android.deskclock.ALARM_ALERT</code> action.
Note that alarm events from other alarm clocks (older Android builds, manufacturer/carrier builds, third party apps) will use
<a href="http://stackoverflow.com/a/15876187">different actions</a>.</p>

<p><a href="/images/btalarm/full_size/btalarm_screenshot_settings.png"><img class="right" src="/images/btalarm/btalarm_screenshot_settings_sm.png" title="Bluetooth alarm" ></a>
My alarm app is implemented using a background service that registers the BroadcastReceiver to listen for alarm events and starts the ringer when an event occurs.
The service is loaded when the app is installed or the phone is powered up.
Since I wanted to support a “repeated ding” ringer style, I also created a separate alarm ringer background service thread
to support sending a timed pattern of Bluetooth commands, with pauses.</p>

<p>I wanted to be able to set configuration options to enable/disable the alarm, change the ringer style, and save the selected Bluetooth device
so I created the appropriate UI controls and used the Android SharedPreferences API to store the settings.</p>

<p>Full source for the Android application can be found at <a href="https://github.com/qqrs/btalarm">github.com/qqrs/btalarm</a>.</p>

<h3 id="acknowledgments">Acknowledgments</h3>

<p>This was a project I worked on at <a href="http://www.hackerschool.com">Hacker School</a>.
Hacker School is a free three-month self-directed learning environment
that has been described as being “like a writers’ retreat for programmers.”</p>

<p>Many thanks to <a href="http://twitter.com/leocadiotine">@leocadiotine</a> for repeatedly offering expert guidance in navigating the intricacies of the Android APIs.</p>
]]></content>
  </entry>
  
</feed>
