<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | ]]></title>
  <link href="http://qqrs.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://qqrs.github.com/"/>
  <updated>2019-03-04T00:16:22-05:00</updated>
  <id>http://qqrs.github.com/</id>
  <author>
    <name><![CDATA[Russell Smith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Doorbot]]></title>
    <link href="http://qqrs.github.com/blog/2018/03/29/doorbot/"/>
    <updated>2018-03-29T00:12:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2018/03/29/doorbot</id>
    <content type="html"><![CDATA[<div style="position:relative;padding-bottom:calc(100% / 1.78)"><iframe src="https://gfycat.com/ifr/OrganicGratefulArachnid" frameborder="0" scrolling="no" width="100%" height="100%" style="position:absolute;top:0;left:0;" allowfullscreen=""></iframe></div>

<h2 id="what-is-it">What is it?</h2>

<p>Doorbot is an Internet-connected door unlocker that I built for a community space. It allows people to enter the space without needing to be buzzed in.</p>

<p><img class="center" src="/images/doorbot_flask_app_ready.png" title="Doorbot flask app ready screenshot" ></p>

<h2 id="system-architecture">System Architecture</h2>

<p><a href="http://qqrs.github.com/images/doorbot_block_diagram.png" target="_blank"><img class="center" src="/images/doorbot_block_diagram_th.png" title="Doorbot block diagram" ></a></p>

<p>The Doorbot system consists of:</p>

<ol>
  <li>servo motors to actuate the door buzzer button</li>
  <li>ESP8266 microcontroller with built-in Wi-Fi</li>
  <li>NodeMCU firmware for ESP8266</li>
  <li>lua application code for ESP8266</li>
  <li>MQTT message broker</li>
  <li>web app with user authentication</li>
</ol>

<p>The web app sends HMAC-signed command messages to the MQTT broker. The microcontroller waits for command messages to actuate the servo motor and unlock the door.</p>

<p>The microcontroller also sends periodic heartbeat messages so that the web app can show when Doorbot is offline.</p>

<h2 id="building-a-doorbot">Building a Doorbot</h2>

<p>The <a href="https://octopart.com/bom-tool/tx1u0UMp">bill of materials</a> shows everything purchased to build Doorbot.</p>

<p>[Update 3/3/2019: If I was starting today I’d strongly consider using the Raspberry Pi Zero W instead of the ESP8266.]</p>

<p>To mount Doorbot, I used <a href="https://www.homedepot.com/p/Simpson-Strong-Tie-12-Gauge-Angle-A66/100375146">90° steel angle brackets</a>, <a href="https://www.homedepot.com/p/3M-Scotch-1-in-x-1-66-yds-Permanent-Double-Sided-Outdoor-Mounting-Tape-411DC-SF/100575385">3M 4011 double-sided mounting tape</a>, and 4” and 8” <a href="https://www.homedepot.com/p/Commercial-Electric-4-in-Cable-Tie-Natural-1000-Pack-GT-100M/203531927">cable ties</a>—all from Home Depot.</p>

<h2 id="photos">Photos</h2>

<div>
<img src="http://qqrs.github.com/images/doorbot_intercom.jpg" style="display: inline-block" />
<img src="http://qqrs.github.com/images/doorbot_call.jpg" style="display: inline-block" />
</div>

<h2 id="suggested-reading">Suggested Reading</h2>

<ol>
  <li>
    <p><a href="https://www.jameco.com/jameco/workshop/howitworks/how-servo-motors-work.html" target="_blank">https://www.jameco.com/jameco/workshop/howitworks/how-servo-motors-work.html</a></p>
  </li>
  <li>
    <p><a href="https://hackaday.com/2014/08/26/new-chip-alert-the-esp8266-wifi-module-its-5/" target="_blank">https://hackaday.com/2014/08/26/new-chip-alert-the-esp8266-wifi-module-its-5/</a></p>
  </li>
  <li>
    <p><a href="https://nodemcu.readthedocs.io/en/master/" target="_blank">https://nodemcu.readthedocs.io/en/master/</a></p>
  </li>
  <li>
    <p><a href="http://www.hivemq.com/mqtt-security-fundamentals/" target="_blank">http://www.hivemq.com/mqtt-security-fundamentals/</a></p>
  </li>
  <li>
    <p><a href="http://www.hivemq.com/blog/mqtt-security-fundamentals-mqtt-message-data-integrity" target="_blank">http://www.hivemq.com/blog/mqtt-security-fundamentals-mqtt-message-data-integrity</a></p>
  </li>
</ol>

<p>[Update 3/3/2019: This <a href="https://hackaday.com/2017/06/20/practical-iot-cryptography-on-the-espressif-esp8266/">Hackaday post</a> is a practical guide to securing a command protocol for the ESP8266.]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a BitTorrent Client]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/22/writing-a-bittorrent-client/"/>
    <updated>2016-05-22T12:12:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/22/writing-a-bittorrent-client</id>
    <content type="html"><![CDATA[<p>This post is a short overview of what is required for a minimal, download-only BitTorrent implementation.</p>

<p>Earlier this year, I wrote <a href="https://github.com/qqrs/qqtorrent">a BitTorrent client</a> as an excuse to practice concurrency and networking concepts. But the resources and documentation I found while researching the protocol felt scattered, so I’m distilling my understanding here as a starting point for others.</p>

<h2 id="parse-the-torrent-metainfo-file">1. Parse the <code>.torrent</code> metainfo file</h2>
<p>The <code>.torrent</code> file contains information about the torrent tracker and the files to be downloaded.
Data is encoded using a serialization protocol called bencoding.
Parsing bencoded data is not significantly more difficult than parsing json, and there is likely a bencoding library available for your language.</p>

<h2 id="connect-to-the-tracker">2. Connect to the tracker</h2>
<p>To connect to the torrent, an HTTP GET request is made to the tracker announce URL.
The response provides a list of available peers.</p>

<h2 id="concurrent-peer-network-connections">3. Concurrent peer network connections</h2>
<p>The client will connect to peers using TCP sockets.
To support multiple simultaneous connections the client should be able to handle network operations asynchronously.
There are two fundamental ways to do this in Python: (1) using threads, or
(2) using an event loop with select() (or a library like Twisted which does so internally).</p>

<h2 id="peer-protocol">4. Peer protocol</h2>
<p>The spec defines a number of messages that each peer must be prepared to send and receive.
A minimal BitTorrent client may not need to implement all of these messages.
In order to start downloading from a peer, a client needs to send a handshake, wait for a handshake response,
send an ‘interested’ message, and wait for an ‘unchoke’ message.
It can then start sending ‘request’ messages to request blocks.
The peer will respond with ‘piece’ messages which contain the block data.</p>

<h2 id="torrent-strategy">5. Torrent strategy</h2>
<p>The client must download all blocks of all pieces and assemble them into the complete output file
set. If any peers disconnect or fail to provide a block, the client must request from another peer.
A more ambitious client may also attempt to further optimize its download strategy to improve download times.</p>

<h2 id="further-reading">Further reading</h2>

<p>I found the following blog posts to be very helpful when I was getting started:</p>

<p><a href="http://www.kristenwidman.com/blog/33/how-to-write-a-bittorrent-client-part-1/">How to Write a Bittorrent Client (part 1)</a>
<a href="http://www.kristenwidman.com/blog/71/how-to-write-a-bittorrent-client-part-2/">(part 2)</a>
(Kristen Widman)<br />
<a href="http://charmeleon.github.io/advice/2012/11/26/pitfalls-when-creating-a-bittorrent-client/">Pitfalls when creating a BitTorrent client</a> (Erick Rivas)</p>

<p>The best advice I picked up from them is (1) to rely on the <a href="https://wiki.theory.org/BitTorrentSpecification">unofficial BitTorrent spec</a>, and (2) to use Wireshark to inspect network traffic to clarify ambiguities in the spec and to validate your implementation.</p>

<p>There are now many extensions to the original BitTorrent protocol, so you should stick with <code>.torrent</code> files that do not use new or experimental features for your testing. I have had good luck with torrents from <a href="https://archive.org/details/bittorrent">archive.org</a> and <a href="http://bt.etree.org/">bt.etree.org</a>.</p>

<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which Python operations are atomic?]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/which-python-operations-are-atomic/"/>
    <updated>2016-05-01T18:52:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/which-python-operations-are-atomic</id>
    <content type="html"><![CDATA[<p>A conversation with a coworker turned me on to the fact that a surprising range of operations in Python are atomic, even operations like dictionary and class member assignment.</p>

<p>This wasn’t something I would have anticipated, given the number of machine language instructions that must ultimately be performed to complete an operation like hash table insertion.</p>

<p>Why?</p>

<p>The <a href="https://docs.python.org/2/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe">Python FAQ</a> provides explanation and a full list of atomic operations, but the short answer is:</p>

<ol>
  <li>The Python bytecode interpreter only switches between threads between bytecode instructions</li>
  <li>The Global Interpreter Lock (GIL) only allows a single thread to execute at a time</li>
  <li>Many operations translate to a single bytecode instruction</li>
</ol>

<p>It’s easy to check whether an operation compiles to a single bytecode instruction with <code>dis</code>.</p>

<p><code>
&gt;&gt;&gt; def update_dict():
...     d['a'] = 1
...
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(update_dict)
  3           0 LOAD_CONST               1 (1)
              3 LOAD_GLOBAL              0 (d)
              6 LOAD_CONST               2 ('a')
              9 STORE_SUBSCR                        # single bytecode instruction
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE
</code></p>

<p>So what are the caveats? Is it safe to rely on atomicity instead of using locks?</p>

<p>First, the linked FAQ above doesn’t make it clear to what degree this behavior is considered part of the Python spec as opposed to simply a consequence of CPython implementation details.
It depends on the GIL, so it would likely be unsafe on GIL-less Pythons (IronPython, Jython, PyPy-TM).
Would it be safe on non-CPython implementations with a GIL (PyPy)?
I could certainly imagine possible optimizations that would invalidate the atomicity of these operations.</p>

<p>Second, even if not strictly necessary, locks provide clear thread-safety guarantees and also serve as useful documentation that the code is accessing shared memory.
Without a lock, care must be taken since it could be easy to assume operations are atomic when they are not (postmortem example: <a href="https://emptysqua.re/blog/pythons-swap-is-not-atomic/">Python’s swap is not atomic</a>).
A clear comment is probably also necessary to head off the “Wait, this might need a lock!” reaction from collaborators.</p>

<p>Third, because Python allows overriding of so many builtin methods, there are edge cases where these operations are no longer atomic. The <a href="https://google.github.io/styleguide/pyguide.html#Threading">Google Python style guide</a> advises:</p>

<blockquote>
  <p>Do not rely on the atomicity of built-in types.</p>

  <p>While Python’s built-in data types such as dictionaries appear to have atomic operations, there are corner cases where they aren’t atomic (e.g. if <strong>hash</strong> or <strong>eq</strong> are implemented as Python methods) and their atomicity should not be relied upon. Neither should you rely on atomic variable assignment (since this in turn depends on dictionaries).</p>
</blockquote>

<p>That pretty much settles it for the general case.</p>

<p>There may still be some cases where it would be necessary, such as when implementing new locking functionality or in cases where performance is critical.
Relying on atomicity of operations effectively allows you to piggyback on the GIL for your locking, reducing the cost of additional locks.
But if lock performance is so critical, it seems like it would be better to first profile hotspots and look for other speedups.</p>

<p>So does it make sense to rely on the atomicity of operations when accessing or modifying shared mutable state?</p>

<p>Short answer:<br />
1. you’d better have a good reason<br />
2. you’d better do some thorough research  </p>

<p>Otherwise, you’re better off just using a lock.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Notes: The Architecture of Open Source Applications II]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/reading-notes-the-architecture-of-open-source-applications/"/>
    <updated>2016-05-01T16:37:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/reading-notes-the-architecture-of-open-source-applications</id>
    <content type="html"><![CDATA[<p>Earlier this year, I read <a href="http://aosabook.org/en/buy.html#vol2"><em>The Architecture of Open Source Applications, Volume II: Structure, Scale, and a Few More Fearless Hacks</em></a>.</p>

<p>It was an excellent read, and fills a gap in the market for software engineering books:</p>

<blockquote>
  <p>Architects look at thousands of buildings during their training, and study critiques of those buildings written by masters. In contrast, most software developers only ever get to know a handful of large programs well - usually programs they wrote themselves - and never study the great programs of history. As a result, they repeat one another’s mistakes rather than building on one another’s successes. This second volume of The Architecture of Open Source Applications aims to change that. In it, the authors of twenty-four open source applications explain how their software is structured, and why. What are each program’s major components? How do they interact? And what did their builders learn during their development? In answering these questions, the contributors to this book provide unique insights into how they think.</p>
</blockquote>

<p>Every chapter of AOS2 is a guided tour of an interesting codebase, with all of the hard-earned design wisdom distilled down to specific advice.</p>

<p>Though the chapters are mostly free-form, there are a few repeating themes that crop up throughout, allowing comparisons between the approaches taken in different problem domains:<br />
1. Modularity<br />
2. Testing<br />
3. The danger of expecting to be able to predict the future  </p>

<p>Here are my personal favorites — chapters that stood out as being especially clearly-written and thought-provoking:<br />
1. Scalable Web Architecture and Distributed Systems<br />
2. FreeRTOS<br />
3. The Glasgow Haskell Compiler<br />
4. GPSD<br />
5. nginx<br />
6. Twisted<br />
7. Yesod<br />
8. ZeroMQ  </p>

<p>The full content is available to <a href="http://aosabook.org/en/index.html">read for free online</a>, and all profits from <a href="http://aosabook.org/en/buy.html#vol2">hard copy sales</a> go to charity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Hash Collisions]]></title>
    <link href="http://qqrs.github.com/blog/2016/05/01/git-hash-collisions/"/>
    <updated>2016-05-01T14:40:00-04:00</updated>
    <id>http://qqrs.github.com/blog/2016/05/01/git-hash-collisions</id>
    <content type="html"><![CDATA[<p>While re-reading <em>The Architecture of Open Source Applications, Volume II</em>, a line in the <a href="http://aosabook.org/en/git.html">chapter on git</a> caught my eye:</p>

<blockquote>
  <p>if two objects are different they will have different SHAs.</p>
</blockquote>

<p>This was surprising, as there should always be be some very very small but nonzero chance of a hash collision. Either the book is simplifying for ease of explanation, or git is doing something behind the scenes that is more complicated than simply hashing the contents of the object.</p>

<p>It turns out that hash collisions are possible.</p>

<p>As expected, an accidental collision is very unlikely: on even a large and active repo, a collision is unlikely to occur in the timespan of the <a href="http://diego.assencio.com/?index=eacd6eedf46c9dd596a5f12221ad15b8">age of the universe</a>.</p>

<p>Even if an attacker could break SHA-1 or brute-force a hash, <a href="http://stackoverflow.com/a/9392525">git always prefers the older version of an object</a>, so the attacker would be unable to replace an existing file with a tainted version.</p>
]]></content>
  </entry>
  
</feed>
